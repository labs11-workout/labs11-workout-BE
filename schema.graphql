type Query { #These are all the queries that can be called from our API. If you create a resolver and want it to be a query, you need to place the query here and define what it is called, it's arguments if it has any, and the type of data it returns. (Must match a query that's in the Query Resolver Object.)
	info: String!
	users(skip: Int, first: Int): [User]
	user(authId: String): User
	userLogin: User
	getSchedules: [Schedule]
	getProfile: User
	getWorkouts(scheduleId: ID!): [Workout]
	getExercises(workoutId: ID!): [Exercise]
	getBodyMeasurements(userId: ID!): [BodyMeasurement]
	getBodyMetrics(userId: ID!): [BodyMetric]
	getNotes(subjectId: ID): [Note]
	getSavedWorkouts(userId: ID!): [SavedWorkout]
}

type Mutation { #These are all the mutations that can be called from our API. If you create a resolver and want it to be a mutation, you need to place the mutation here and define what it is called, it's arguments if it has any, and the type of data it returns. (Must match a mutation that's in the Mutation Resolver Object.)
	addSchedule(time: String!): Schedule
	deleteSchedule(id: ID!): Schedule
	editSchedule(id: ID!, time: String!): Schedule
	addWorkout(name: String!, scheduleId: ID!): Workout
	deleteWorkout(id: ID!): Workout
	editWorkout(id: ID!, name: String!): Workout
	addExercise(
		sets: Int
		reps: Int
		intervals: Int
		duration: Float
		intensity: Int
		name: String!
		workoutId: ID!
	): Exercise
	editExercise(
		sets: Int
		reps: Int
		intervals: Int
		duration: Float
		intensity: Int
		name: String
		exerciseId: ID!
	): Exercise
	deleteExercise(exerciseId: ID!): Exercise
	addBodyMeasurement(
		hips: Float
		waist: Float
		rightArm: Float
		leftArm: Float
		rightLeg: Float
		leftLeg: Float
		userId: ID!
	): BodyMeasurement
	deleteBodyMeasurement(id: ID!): BodyMeasurement
	editBodyMeasurement(
		id: ID!
		hips: Float
		waist: Float
		rightArm: Float
		leftArm: Float
		rightLeg: Float
		leftLeg: Float
	): BodyMeasurement
	addBodyMetric(
		userId: ID!
		height: Float
		weight: Float
		bodyfat: Float
	): BodyMetric
	deleteBodyMetric(id: ID!): BodyMetric
	editBodyMetric(
		id: ID!
		height: Float
		weight: Float
		bodyfat: Float
	): BodyMetric
	addNote(note: String!, subjectId: ID): Note
	editNote(noteId: ID!, note: String!): Note
	deleteNote(noteId: ID!): Note
	addSavedWorkout(name: String!, userId: ID!): SavedWorkout
	editSavedWorkout(id: ID!, name: String!): SavedWorkout
	deleteSavedWorkout(id: ID!): SavedWorkout
}

type Schedule { # Each record of this type is one single time a user has scheduled a workout/s.
	id: ID!
	time: String!
	workouts: [Workout!]!
	completed: Boolean # User may or may not want to track which Workouts they attend.
	user: User!
}

type Workout { # A workout that is named, and has exercises under it. Is also assigned to a specific Schedule.
	id: ID!
	name: String!
	exercises: [Exercise!]!
	completed: Boolean
	schedule: Schedule!
}

type SavedWorkout { # This is a workout the user has saved, so they can easily add it to any day instead of having to create it over and over.
	id: ID!
	name: String!
	exercises: [Exercise!]!
	user: User!
}

type Exercise { # One exercise.
	id: ID!
	name: String!
	sets: Int
	reps: Int
	intervals: Int
	duration: Float
	intensity: Int
	completed: Boolean # Users can track which exercises and workouts that are completed.
	workout: Workout
	savedWorkout: SavedWorkout
}

type User { # User model.
	id: ID!
	schedules: [Schedule!]!
	savedWorkouts: [SavedWorkout!]!
	notes: [Note!]!
	bodyMetrics: [BodyMetric!]!
	bodyMeasurements: [BodyMeasurement!]!
	authId: String!
}

type Note { # A user can write a note about a single scheduled workout time, or a workout.
	id: ID!
	note: String!
	workout: Workout
	createdBy: User!
	schedule: Schedule
}

type BodyMetric {
	id: ID!
	weight: Float
	height: Float
	bodyfat: Float #User could enter a number representing the % of body fat.
	user: User!
}

type BodyMeasurement {
	id: ID!
	hips: Float
	waist: Float
	rightArm: Float
	leftArm: Float
	rightLeg: Float
	leftLeg: Float
	user: User!
}

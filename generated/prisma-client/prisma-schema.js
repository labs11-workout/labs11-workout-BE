module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBodyMeasurement {
  count: Int!
}

type AggregateBodyMetric {
  count: Int!
}

type AggregateExercise {
  count: Int!
}

type AggregateNote {
  count: Int!
}

type AggregateSavedWorkout {
  count: Int!
}

type AggregateSchedule {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorkout {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BodyMeasurement {
  hips: Float
  waist: Float
  rightArm: Float
  leftArm: Float
  rightLeg: Float
  leftLeg: Float
  user: User!
}

type BodyMeasurementConnection {
  pageInfo: PageInfo!
  edges: [BodyMeasurementEdge]!
  aggregate: AggregateBodyMeasurement!
}

input BodyMeasurementCreateInput {
  hips: Float
  waist: Float
  rightArm: Float
  leftArm: Float
  rightLeg: Float
  leftLeg: Float
  user: UserCreateOneInput!
}

type BodyMeasurementEdge {
  node: BodyMeasurement!
  cursor: String!
}

enum BodyMeasurementOrderByInput {
  hips_ASC
  hips_DESC
  waist_ASC
  waist_DESC
  rightArm_ASC
  rightArm_DESC
  leftArm_ASC
  leftArm_DESC
  rightLeg_ASC
  rightLeg_DESC
  leftLeg_ASC
  leftLeg_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BodyMeasurementPreviousValues {
  hips: Float
  waist: Float
  rightArm: Float
  leftArm: Float
  rightLeg: Float
  leftLeg: Float
}

type BodyMeasurementSubscriptionPayload {
  mutation: MutationType!
  node: BodyMeasurement
  updatedFields: [String!]
  previousValues: BodyMeasurementPreviousValues
}

input BodyMeasurementSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BodyMeasurementWhereInput
  AND: [BodyMeasurementSubscriptionWhereInput!]
  OR: [BodyMeasurementSubscriptionWhereInput!]
  NOT: [BodyMeasurementSubscriptionWhereInput!]
}

input BodyMeasurementUpdateManyMutationInput {
  hips: Float
  waist: Float
  rightArm: Float
  leftArm: Float
  rightLeg: Float
  leftLeg: Float
}

input BodyMeasurementWhereInput {
  hips: Float
  hips_not: Float
  hips_in: [Float!]
  hips_not_in: [Float!]
  hips_lt: Float
  hips_lte: Float
  hips_gt: Float
  hips_gte: Float
  waist: Float
  waist_not: Float
  waist_in: [Float!]
  waist_not_in: [Float!]
  waist_lt: Float
  waist_lte: Float
  waist_gt: Float
  waist_gte: Float
  rightArm: Float
  rightArm_not: Float
  rightArm_in: [Float!]
  rightArm_not_in: [Float!]
  rightArm_lt: Float
  rightArm_lte: Float
  rightArm_gt: Float
  rightArm_gte: Float
  leftArm: Float
  leftArm_not: Float
  leftArm_in: [Float!]
  leftArm_not_in: [Float!]
  leftArm_lt: Float
  leftArm_lte: Float
  leftArm_gt: Float
  leftArm_gte: Float
  rightLeg: Float
  rightLeg_not: Float
  rightLeg_in: [Float!]
  rightLeg_not_in: [Float!]
  rightLeg_lt: Float
  rightLeg_lte: Float
  rightLeg_gt: Float
  rightLeg_gte: Float
  leftLeg: Float
  leftLeg_not: Float
  leftLeg_in: [Float!]
  leftLeg_not_in: [Float!]
  leftLeg_lt: Float
  leftLeg_lte: Float
  leftLeg_gt: Float
  leftLeg_gte: Float
  user: UserWhereInput
  AND: [BodyMeasurementWhereInput!]
  OR: [BodyMeasurementWhereInput!]
  NOT: [BodyMeasurementWhereInput!]
}

type BodyMetric {
  weight: Float
  height: Float
  bodyfat: Float
  user: User!
}

type BodyMetricConnection {
  pageInfo: PageInfo!
  edges: [BodyMetricEdge]!
  aggregate: AggregateBodyMetric!
}

input BodyMetricCreateInput {
  weight: Float
  height: Float
  bodyfat: Float
  user: UserCreateOneInput!
}

type BodyMetricEdge {
  node: BodyMetric!
  cursor: String!
}

enum BodyMetricOrderByInput {
  weight_ASC
  weight_DESC
  height_ASC
  height_DESC
  bodyfat_ASC
  bodyfat_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BodyMetricPreviousValues {
  weight: Float
  height: Float
  bodyfat: Float
}

type BodyMetricSubscriptionPayload {
  mutation: MutationType!
  node: BodyMetric
  updatedFields: [String!]
  previousValues: BodyMetricPreviousValues
}

input BodyMetricSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BodyMetricWhereInput
  AND: [BodyMetricSubscriptionWhereInput!]
  OR: [BodyMetricSubscriptionWhereInput!]
  NOT: [BodyMetricSubscriptionWhereInput!]
}

input BodyMetricUpdateManyMutationInput {
  weight: Float
  height: Float
  bodyfat: Float
}

input BodyMetricWhereInput {
  weight: Float
  weight_not: Float
  weight_in: [Float!]
  weight_not_in: [Float!]
  weight_lt: Float
  weight_lte: Float
  weight_gt: Float
  weight_gte: Float
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  bodyfat: Float
  bodyfat_not: Float
  bodyfat_in: [Float!]
  bodyfat_not_in: [Float!]
  bodyfat_lt: Float
  bodyfat_lte: Float
  bodyfat_gt: Float
  bodyfat_gte: Float
  user: UserWhereInput
  AND: [BodyMetricWhereInput!]
  OR: [BodyMetricWhereInput!]
  NOT: [BodyMetricWhereInput!]
}

scalar DateTime

type Exercise {
  id: ID!
  name: String!
  sets: Int
  reps: Int
  intervals: Int
  duration: Int
  intensity: Int
}

type ExerciseConnection {
  pageInfo: PageInfo!
  edges: [ExerciseEdge]!
  aggregate: AggregateExercise!
}

input ExerciseCreateInput {
  name: String!
  sets: Int
  reps: Int
  intervals: Int
  duration: Int
  intensity: Int
}

input ExerciseCreateManyInput {
  create: [ExerciseCreateInput!]
  connect: [ExerciseWhereUniqueInput!]
}

type ExerciseEdge {
  node: Exercise!
  cursor: String!
}

enum ExerciseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  sets_ASC
  sets_DESC
  reps_ASC
  reps_DESC
  intervals_ASC
  intervals_DESC
  duration_ASC
  duration_DESC
  intensity_ASC
  intensity_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExercisePreviousValues {
  id: ID!
  name: String!
  sets: Int
  reps: Int
  intervals: Int
  duration: Int
  intensity: Int
}

input ExerciseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  sets: Int
  sets_not: Int
  sets_in: [Int!]
  sets_not_in: [Int!]
  sets_lt: Int
  sets_lte: Int
  sets_gt: Int
  sets_gte: Int
  reps: Int
  reps_not: Int
  reps_in: [Int!]
  reps_not_in: [Int!]
  reps_lt: Int
  reps_lte: Int
  reps_gt: Int
  reps_gte: Int
  intervals: Int
  intervals_not: Int
  intervals_in: [Int!]
  intervals_not_in: [Int!]
  intervals_lt: Int
  intervals_lte: Int
  intervals_gt: Int
  intervals_gte: Int
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  intensity: Int
  intensity_not: Int
  intensity_in: [Int!]
  intensity_not_in: [Int!]
  intensity_lt: Int
  intensity_lte: Int
  intensity_gt: Int
  intensity_gte: Int
  AND: [ExerciseScalarWhereInput!]
  OR: [ExerciseScalarWhereInput!]
  NOT: [ExerciseScalarWhereInput!]
}

type ExerciseSubscriptionPayload {
  mutation: MutationType!
  node: Exercise
  updatedFields: [String!]
  previousValues: ExercisePreviousValues
}

input ExerciseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExerciseWhereInput
  AND: [ExerciseSubscriptionWhereInput!]
  OR: [ExerciseSubscriptionWhereInput!]
  NOT: [ExerciseSubscriptionWhereInput!]
}

input ExerciseUpdateDataInput {
  name: String
  sets: Int
  reps: Int
  intervals: Int
  duration: Int
  intensity: Int
}

input ExerciseUpdateInput {
  name: String
  sets: Int
  reps: Int
  intervals: Int
  duration: Int
  intensity: Int
}

input ExerciseUpdateManyDataInput {
  name: String
  sets: Int
  reps: Int
  intervals: Int
  duration: Int
  intensity: Int
}

input ExerciseUpdateManyInput {
  create: [ExerciseCreateInput!]
  update: [ExerciseUpdateWithWhereUniqueNestedInput!]
  upsert: [ExerciseUpsertWithWhereUniqueNestedInput!]
  delete: [ExerciseWhereUniqueInput!]
  connect: [ExerciseWhereUniqueInput!]
  set: [ExerciseWhereUniqueInput!]
  disconnect: [ExerciseWhereUniqueInput!]
  deleteMany: [ExerciseScalarWhereInput!]
  updateMany: [ExerciseUpdateManyWithWhereNestedInput!]
}

input ExerciseUpdateManyMutationInput {
  name: String
  sets: Int
  reps: Int
  intervals: Int
  duration: Int
  intensity: Int
}

input ExerciseUpdateManyWithWhereNestedInput {
  where: ExerciseScalarWhereInput!
  data: ExerciseUpdateManyDataInput!
}

input ExerciseUpdateWithWhereUniqueNestedInput {
  where: ExerciseWhereUniqueInput!
  data: ExerciseUpdateDataInput!
}

input ExerciseUpsertWithWhereUniqueNestedInput {
  where: ExerciseWhereUniqueInput!
  update: ExerciseUpdateDataInput!
  create: ExerciseCreateInput!
}

input ExerciseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  sets: Int
  sets_not: Int
  sets_in: [Int!]
  sets_not_in: [Int!]
  sets_lt: Int
  sets_lte: Int
  sets_gt: Int
  sets_gte: Int
  reps: Int
  reps_not: Int
  reps_in: [Int!]
  reps_not_in: [Int!]
  reps_lt: Int
  reps_lte: Int
  reps_gt: Int
  reps_gte: Int
  intervals: Int
  intervals_not: Int
  intervals_in: [Int!]
  intervals_not_in: [Int!]
  intervals_lt: Int
  intervals_lte: Int
  intervals_gt: Int
  intervals_gte: Int
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  intensity: Int
  intensity_not: Int
  intensity_in: [Int!]
  intensity_not_in: [Int!]
  intensity_lt: Int
  intensity_lte: Int
  intensity_gt: Int
  intensity_gte: Int
  AND: [ExerciseWhereInput!]
  OR: [ExerciseWhereInput!]
  NOT: [ExerciseWhereInput!]
}

input ExerciseWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBodyMeasurement(data: BodyMeasurementCreateInput!): BodyMeasurement!
  updateManyBodyMeasurements(data: BodyMeasurementUpdateManyMutationInput!, where: BodyMeasurementWhereInput): BatchPayload!
  deleteManyBodyMeasurements(where: BodyMeasurementWhereInput): BatchPayload!
  createBodyMetric(data: BodyMetricCreateInput!): BodyMetric!
  updateManyBodyMetrics(data: BodyMetricUpdateManyMutationInput!, where: BodyMetricWhereInput): BatchPayload!
  deleteManyBodyMetrics(where: BodyMetricWhereInput): BatchPayload!
  createExercise(data: ExerciseCreateInput!): Exercise!
  updateExercise(data: ExerciseUpdateInput!, where: ExerciseWhereUniqueInput!): Exercise
  updateManyExercises(data: ExerciseUpdateManyMutationInput!, where: ExerciseWhereInput): BatchPayload!
  upsertExercise(where: ExerciseWhereUniqueInput!, create: ExerciseCreateInput!, update: ExerciseUpdateInput!): Exercise!
  deleteExercise(where: ExerciseWhereUniqueInput!): Exercise
  deleteManyExercises(where: ExerciseWhereInput): BatchPayload!
  createNote(data: NoteCreateInput!): Note!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  createSavedWorkout(data: SavedWorkoutCreateInput!): SavedWorkout!
  updateSavedWorkout(data: SavedWorkoutUpdateInput!, where: SavedWorkoutWhereUniqueInput!): SavedWorkout
  upsertSavedWorkout(where: SavedWorkoutWhereUniqueInput!, create: SavedWorkoutCreateInput!, update: SavedWorkoutUpdateInput!): SavedWorkout!
  deleteSavedWorkout(where: SavedWorkoutWhereUniqueInput!): SavedWorkout
  deleteManySavedWorkouts(where: SavedWorkoutWhereInput): BatchPayload!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  updateManySchedules(data: ScheduleUpdateManyMutationInput!, where: ScheduleWhereInput): BatchPayload!
  upsertSchedule(where: ScheduleWhereUniqueInput!, create: ScheduleCreateInput!, update: ScheduleUpdateInput!): Schedule!
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteManySchedules(where: ScheduleWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWorkout(data: WorkoutCreateInput!): Workout!
  updateWorkout(data: WorkoutUpdateInput!, where: WorkoutWhereUniqueInput!): Workout
  updateManyWorkouts(data: WorkoutUpdateManyMutationInput!, where: WorkoutWhereInput): BatchPayload!
  upsertWorkout(where: WorkoutWhereUniqueInput!, create: WorkoutCreateInput!, update: WorkoutUpdateInput!): Workout!
  deleteWorkout(where: WorkoutWhereUniqueInput!): Workout
  deleteManyWorkouts(where: WorkoutWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Note {
  id: ID!
  note: String!
  workout: Workout!
  createdBy: User!
  schedule: Schedule!
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  note: String!
  workout: WorkoutCreateOneInput!
  createdBy: UserCreateOneWithoutNotesInput!
  schedule: ScheduleCreateOneInput!
}

input NoteCreateManyWithoutCreatedByInput {
  create: [NoteCreateWithoutCreatedByInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutCreatedByInput {
  note: String!
  workout: WorkoutCreateOneInput!
  schedule: ScheduleCreateOneInput!
}

type NoteEdge {
  node: Note!
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotePreviousValues {
  id: ID!
  note: String!
}

input NoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  AND: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  NOT: [NoteScalarWhereInput!]
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
  AND: [NoteSubscriptionWhereInput!]
  OR: [NoteSubscriptionWhereInput!]
  NOT: [NoteSubscriptionWhereInput!]
}

input NoteUpdateInput {
  note: String
  workout: WorkoutUpdateOneRequiredInput
  createdBy: UserUpdateOneRequiredWithoutNotesInput
  schedule: ScheduleUpdateOneRequiredInput
}

input NoteUpdateManyDataInput {
  note: String
}

input NoteUpdateManyMutationInput {
  note: String
}

input NoteUpdateManyWithoutCreatedByInput {
  create: [NoteCreateWithoutCreatedByInput!]
  delete: [NoteWhereUniqueInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [NoteScalarWhereInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
}

input NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyDataInput!
}

input NoteUpdateWithoutCreatedByDataInput {
  note: String
  workout: WorkoutUpdateOneRequiredInput
  schedule: ScheduleUpdateOneRequiredInput
}

input NoteUpdateWithWhereUniqueWithoutCreatedByInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutCreatedByDataInput!
}

input NoteUpsertWithWhereUniqueWithoutCreatedByInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutCreatedByDataInput!
  create: NoteCreateWithoutCreatedByInput!
}

input NoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  workout: WorkoutWhereInput
  createdBy: UserWhereInput
  schedule: ScheduleWhereInput
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
}

input NoteWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  bodyMeasurements(where: BodyMeasurementWhereInput, orderBy: BodyMeasurementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BodyMeasurement]!
  bodyMeasurementsConnection(where: BodyMeasurementWhereInput, orderBy: BodyMeasurementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BodyMeasurementConnection!
  bodyMetrics(where: BodyMetricWhereInput, orderBy: BodyMetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BodyMetric]!
  bodyMetricsConnection(where: BodyMetricWhereInput, orderBy: BodyMetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BodyMetricConnection!
  exercise(where: ExerciseWhereUniqueInput!): Exercise
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise]!
  exercisesConnection(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExerciseConnection!
  note(where: NoteWhereUniqueInput!): Note
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  savedWorkout(where: SavedWorkoutWhereUniqueInput!): SavedWorkout
  savedWorkouts(where: SavedWorkoutWhereInput, orderBy: SavedWorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SavedWorkout]!
  savedWorkoutsConnection(where: SavedWorkoutWhereInput, orderBy: SavedWorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SavedWorkoutConnection!
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule]!
  schedulesConnection(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduleConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  workout(where: WorkoutWhereUniqueInput!): Workout
  workouts(where: WorkoutWhereInput, orderBy: WorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workout]!
  workoutsConnection(where: WorkoutWhereInput, orderBy: WorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkoutConnection!
  node(id: ID!): Node
}

type SavedWorkout {
  id: ID!
  workout: Workout!
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise!]
}

type SavedWorkoutConnection {
  pageInfo: PageInfo!
  edges: [SavedWorkoutEdge]!
  aggregate: AggregateSavedWorkout!
}

input SavedWorkoutCreateInput {
  workout: WorkoutCreateOneInput!
  exercises: ExerciseCreateManyInput
}

input SavedWorkoutCreateManyInput {
  create: [SavedWorkoutCreateInput!]
  connect: [SavedWorkoutWhereUniqueInput!]
}

type SavedWorkoutEdge {
  node: SavedWorkout!
  cursor: String!
}

enum SavedWorkoutOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SavedWorkoutPreviousValues {
  id: ID!
}

input SavedWorkoutScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [SavedWorkoutScalarWhereInput!]
  OR: [SavedWorkoutScalarWhereInput!]
  NOT: [SavedWorkoutScalarWhereInput!]
}

type SavedWorkoutSubscriptionPayload {
  mutation: MutationType!
  node: SavedWorkout
  updatedFields: [String!]
  previousValues: SavedWorkoutPreviousValues
}

input SavedWorkoutSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SavedWorkoutWhereInput
  AND: [SavedWorkoutSubscriptionWhereInput!]
  OR: [SavedWorkoutSubscriptionWhereInput!]
  NOT: [SavedWorkoutSubscriptionWhereInput!]
}

input SavedWorkoutUpdateDataInput {
  workout: WorkoutUpdateOneRequiredInput
  exercises: ExerciseUpdateManyInput
}

input SavedWorkoutUpdateInput {
  workout: WorkoutUpdateOneRequiredInput
  exercises: ExerciseUpdateManyInput
}

input SavedWorkoutUpdateManyInput {
  create: [SavedWorkoutCreateInput!]
  update: [SavedWorkoutUpdateWithWhereUniqueNestedInput!]
  upsert: [SavedWorkoutUpsertWithWhereUniqueNestedInput!]
  delete: [SavedWorkoutWhereUniqueInput!]
  connect: [SavedWorkoutWhereUniqueInput!]
  set: [SavedWorkoutWhereUniqueInput!]
  disconnect: [SavedWorkoutWhereUniqueInput!]
  deleteMany: [SavedWorkoutScalarWhereInput!]
}

input SavedWorkoutUpdateWithWhereUniqueNestedInput {
  where: SavedWorkoutWhereUniqueInput!
  data: SavedWorkoutUpdateDataInput!
}

input SavedWorkoutUpsertWithWhereUniqueNestedInput {
  where: SavedWorkoutWhereUniqueInput!
  update: SavedWorkoutUpdateDataInput!
  create: SavedWorkoutCreateInput!
}

input SavedWorkoutWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  workout: WorkoutWhereInput
  exercises_every: ExerciseWhereInput
  exercises_some: ExerciseWhereInput
  exercises_none: ExerciseWhereInput
  AND: [SavedWorkoutWhereInput!]
  OR: [SavedWorkoutWhereInput!]
  NOT: [SavedWorkoutWhereInput!]
}

input SavedWorkoutWhereUniqueInput {
  id: ID
}

type Schedule {
  id: ID!
  time: DateTime!
  workouts(where: WorkoutWhereInput, orderBy: WorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workout!]
}

type ScheduleConnection {
  pageInfo: PageInfo!
  edges: [ScheduleEdge]!
  aggregate: AggregateSchedule!
}

input ScheduleCreateInput {
  time: DateTime!
  workouts: WorkoutCreateManyInput
}

input ScheduleCreateManyInput {
  create: [ScheduleCreateInput!]
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateOneInput {
  create: ScheduleCreateInput
  connect: ScheduleWhereUniqueInput
}

type ScheduleEdge {
  node: Schedule!
  cursor: String!
}

enum ScheduleOrderByInput {
  id_ASC
  id_DESC
  time_ASC
  time_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SchedulePreviousValues {
  id: ID!
  time: DateTime!
}

input ScheduleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  AND: [ScheduleScalarWhereInput!]
  OR: [ScheduleScalarWhereInput!]
  NOT: [ScheduleScalarWhereInput!]
}

type ScheduleSubscriptionPayload {
  mutation: MutationType!
  node: Schedule
  updatedFields: [String!]
  previousValues: SchedulePreviousValues
}

input ScheduleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ScheduleWhereInput
  AND: [ScheduleSubscriptionWhereInput!]
  OR: [ScheduleSubscriptionWhereInput!]
  NOT: [ScheduleSubscriptionWhereInput!]
}

input ScheduleUpdateDataInput {
  time: DateTime
  workouts: WorkoutUpdateManyInput
}

input ScheduleUpdateInput {
  time: DateTime
  workouts: WorkoutUpdateManyInput
}

input ScheduleUpdateManyDataInput {
  time: DateTime
}

input ScheduleUpdateManyInput {
  create: [ScheduleCreateInput!]
  update: [ScheduleUpdateWithWhereUniqueNestedInput!]
  upsert: [ScheduleUpsertWithWhereUniqueNestedInput!]
  delete: [ScheduleWhereUniqueInput!]
  connect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  deleteMany: [ScheduleScalarWhereInput!]
  updateMany: [ScheduleUpdateManyWithWhereNestedInput!]
}

input ScheduleUpdateManyMutationInput {
  time: DateTime
}

input ScheduleUpdateManyWithWhereNestedInput {
  where: ScheduleScalarWhereInput!
  data: ScheduleUpdateManyDataInput!
}

input ScheduleUpdateOneRequiredInput {
  create: ScheduleCreateInput
  update: ScheduleUpdateDataInput
  upsert: ScheduleUpsertNestedInput
  connect: ScheduleWhereUniqueInput
}

input ScheduleUpdateWithWhereUniqueNestedInput {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateDataInput!
}

input ScheduleUpsertNestedInput {
  update: ScheduleUpdateDataInput!
  create: ScheduleCreateInput!
}

input ScheduleUpsertWithWhereUniqueNestedInput {
  where: ScheduleWhereUniqueInput!
  update: ScheduleUpdateDataInput!
  create: ScheduleCreateInput!
}

input ScheduleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  workouts_every: WorkoutWhereInput
  workouts_some: WorkoutWhereInput
  workouts_none: WorkoutWhereInput
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
}

input ScheduleWhereUniqueInput {
  id: ID
}

type Subscription {
  bodyMeasurement(where: BodyMeasurementSubscriptionWhereInput): BodyMeasurementSubscriptionPayload
  bodyMetric(where: BodyMetricSubscriptionWhereInput): BodyMetricSubscriptionPayload
  exercise(where: ExerciseSubscriptionWhereInput): ExerciseSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  savedWorkout(where: SavedWorkoutSubscriptionWhereInput): SavedWorkoutSubscriptionPayload
  schedule(where: ScheduleSubscriptionWhereInput): ScheduleSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  workout(where: WorkoutSubscriptionWhereInput): WorkoutSubscriptionPayload
}

type User {
  id: ID!
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule!]
  savedWorkouts(where: SavedWorkoutWhereInput, orderBy: SavedWorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SavedWorkout!]
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
  googleId: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  schedules: ScheduleCreateManyInput
  savedWorkouts: SavedWorkoutCreateManyInput
  notes: NoteCreateManyWithoutCreatedByInput
  googleId: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNotesInput {
  schedules: ScheduleCreateManyInput
  savedWorkouts: SavedWorkoutCreateManyInput
  googleId: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  googleId_ASC
  googleId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  googleId: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  schedules: ScheduleUpdateManyInput
  savedWorkouts: SavedWorkoutUpdateManyInput
  notes: NoteUpdateManyWithoutCreatedByInput
  googleId: String
}

input UserUpdateManyMutationInput {
  googleId: String
}

input UserUpdateOneRequiredWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  update: UserUpdateWithoutNotesDataInput
  upsert: UserUpsertWithoutNotesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutNotesDataInput {
  schedules: ScheduleUpdateManyInput
  savedWorkouts: SavedWorkoutUpdateManyInput
  googleId: String
}

input UserUpsertWithoutNotesInput {
  update: UserUpdateWithoutNotesDataInput!
  create: UserCreateWithoutNotesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  schedules_every: ScheduleWhereInput
  schedules_some: ScheduleWhereInput
  schedules_none: ScheduleWhereInput
  savedWorkouts_every: SavedWorkoutWhereInput
  savedWorkouts_some: SavedWorkoutWhereInput
  savedWorkouts_none: SavedWorkoutWhereInput
  notes_every: NoteWhereInput
  notes_some: NoteWhereInput
  notes_none: NoteWhereInput
  googleId: String
  googleId_not: String
  googleId_in: [String!]
  googleId_not_in: [String!]
  googleId_lt: String
  googleId_lte: String
  googleId_gt: String
  googleId_gte: String
  googleId_contains: String
  googleId_not_contains: String
  googleId_starts_with: String
  googleId_not_starts_with: String
  googleId_ends_with: String
  googleId_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}

type Workout {
  id: ID!
  name: String!
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise!]
}

type WorkoutConnection {
  pageInfo: PageInfo!
  edges: [WorkoutEdge]!
  aggregate: AggregateWorkout!
}

input WorkoutCreateInput {
  name: String!
  exercises: ExerciseCreateManyInput
}

input WorkoutCreateManyInput {
  create: [WorkoutCreateInput!]
  connect: [WorkoutWhereUniqueInput!]
}

input WorkoutCreateOneInput {
  create: WorkoutCreateInput
  connect: WorkoutWhereUniqueInput
}

type WorkoutEdge {
  node: Workout!
  cursor: String!
}

enum WorkoutOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WorkoutPreviousValues {
  id: ID!
  name: String!
}

input WorkoutScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [WorkoutScalarWhereInput!]
  OR: [WorkoutScalarWhereInput!]
  NOT: [WorkoutScalarWhereInput!]
}

type WorkoutSubscriptionPayload {
  mutation: MutationType!
  node: Workout
  updatedFields: [String!]
  previousValues: WorkoutPreviousValues
}

input WorkoutSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkoutWhereInput
  AND: [WorkoutSubscriptionWhereInput!]
  OR: [WorkoutSubscriptionWhereInput!]
  NOT: [WorkoutSubscriptionWhereInput!]
}

input WorkoutUpdateDataInput {
  name: String
  exercises: ExerciseUpdateManyInput
}

input WorkoutUpdateInput {
  name: String
  exercises: ExerciseUpdateManyInput
}

input WorkoutUpdateManyDataInput {
  name: String
}

input WorkoutUpdateManyInput {
  create: [WorkoutCreateInput!]
  update: [WorkoutUpdateWithWhereUniqueNestedInput!]
  upsert: [WorkoutUpsertWithWhereUniqueNestedInput!]
  delete: [WorkoutWhereUniqueInput!]
  connect: [WorkoutWhereUniqueInput!]
  set: [WorkoutWhereUniqueInput!]
  disconnect: [WorkoutWhereUniqueInput!]
  deleteMany: [WorkoutScalarWhereInput!]
  updateMany: [WorkoutUpdateManyWithWhereNestedInput!]
}

input WorkoutUpdateManyMutationInput {
  name: String
}

input WorkoutUpdateManyWithWhereNestedInput {
  where: WorkoutScalarWhereInput!
  data: WorkoutUpdateManyDataInput!
}

input WorkoutUpdateOneRequiredInput {
  create: WorkoutCreateInput
  update: WorkoutUpdateDataInput
  upsert: WorkoutUpsertNestedInput
  connect: WorkoutWhereUniqueInput
}

input WorkoutUpdateWithWhereUniqueNestedInput {
  where: WorkoutWhereUniqueInput!
  data: WorkoutUpdateDataInput!
}

input WorkoutUpsertNestedInput {
  update: WorkoutUpdateDataInput!
  create: WorkoutCreateInput!
}

input WorkoutUpsertWithWhereUniqueNestedInput {
  where: WorkoutWhereUniqueInput!
  update: WorkoutUpdateDataInput!
  create: WorkoutCreateInput!
}

input WorkoutWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  exercises_every: ExerciseWhereInput
  exercises_some: ExerciseWhereInput
  exercises_none: ExerciseWhereInput
  AND: [WorkoutWhereInput!]
  OR: [WorkoutWhereInput!]
  NOT: [WorkoutWhereInput!]
}

input WorkoutWhereUniqueInput {
  id: ID
}
`
      }
    